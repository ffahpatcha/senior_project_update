# üìÅ router_logic.py
from state_schema import AgentState


def is_out_of_domain(state: AgentState) -> bool:
    return state.classification_result.out_of_domain is True


def is_clarification_needed(state: AgentState) -> bool:
    return state.classification_result.clarification_needed is True


def has_classifier_category(state: AgentState, threshold: float = 0.5) -> bool:
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ category ‡∏ó‡∏µ‡πà classifier ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏û‡∏≠
    categories = state.classification_result.category_level_1
    return categories is not None and any(cat.confidence >= threshold for cat in categories)


def has_user_selected_category(state: AgentState) -> bool:
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å category ‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: return state.user_selected_category is not None
    return False  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô AgentState


def route(state: AgentState) -> str:
    if is_out_of_domain(state):
        return "fallback_handler"
    
    if is_clarification_needed(state):
        return "query_rewriting_agent"
    
    if has_user_selected_category(state):
        return "retrieval_context_agent"
    
    if has_classifier_category(state):
        return "retrieval_context_agent"
    
    # fallback case: ‡πÑ‡∏°‡πà‡∏°‡∏µ category ‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏û‡∏≠ ‚Üí hybrid search ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà filter
    return "retrieval_context_agent"
