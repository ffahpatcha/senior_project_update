# üìÅ state_schema.py
from pydantic import BaseModel, Field
from typing import List, Optional, Literal,Dict

class CategoryScore(BaseModel):
    category: str = Field(..., description="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏ç‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡∏†‡∏≤‡∏ß‡∏∞‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô, ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£")
    confidence: float = Field(..., ge=0.0, le=1.0)

# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category_level_2
class SubcategoryScore(BaseModel):
    subcategory: str = Field(..., description="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏ú‡∏•'")
    confidence: float = Field(..., ge=0.0, le=1.0, description="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à 0.0-1.0")


#Schema ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô
class ClassificationResult(BaseModel):
    category_level_1: Optional[List[CategoryScore]] = Field(None, description="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° confidence")
    category_level_2: Optional[List[SubcategoryScore]] = Field(None, description="‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° confidence")
    clarification_needed: Optional[bool] = None
    out_of_domain: Optional[bool] = None

    def is_terminal(self) -> bool:
        return self.out_of_domain is True or self.clarification_needed is True


# ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö state ‡∏Ç‡∏≠‡∏á agent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
class AgentState(BaseModel):
    user_query: str
    classification_result: ClassificationResult = Field(default_factory=ClassificationResult)
    latency: Optional[Dict[str, float]] = None
    def should_terminate(self) -> bool:
        return self.classification_result.is_terminal()
    response: Optional[str] = None

#Schema ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á LLM structured output
class OutOfDomainResult(BaseModel):
    out_of_domain: bool
    reason: Optional[str] = None

class ClarificationResult(BaseModel):
    clarification_needed: bool
    reason: Optional[str] = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ


class CategoryResult(BaseModel):
    category_level_1: List[CategoryScore]
    category_level_2: List[SubcategoryScore]
