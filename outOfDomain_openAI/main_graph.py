# main_graph.py
from langgraph.graph import StateGraph, END
from state_schema import AgentState
from my_agents.query_classification_agent import run_classification_pipeline
from my_agents.fallback_agent import fallback_agent
from my_agents.clarification_response_agent import clarification_response_agent
# from agents.context_retrieval_agent import dummy_retrieval_agent
from router_logic import route
import json
from my_agents.dental_guardrail_function import dental_input_guardrail
import asyncio
import os
from openai import OpenAI

# ‡∏î‡∏∂‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å Environment Variable
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY")
)


async def input_guardrail_node(state: AgentState) -> AgentState:
    ctx = None
    agent = None
    result = await dental_input_guardrail(ctx, agent, state.user_query)
    if result.tripwire_triggered:
        state.response = (
            "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏ô‡∏ü‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ü‡∏±‡∏ô‡∏Ñ‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        )
        state.classification_result.out_of_domain = True
        state.classification_result.out_of_domain_reason = result.output_info["reasoning"]
    else:
        state.classification_result.out_of_domain = False
        state.classification_result.out_of_domain_reason = result.output_info["reasoning"]
    return state



# Routing function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö classify_query
def routing_node(state: AgentState) -> str:
    return route(state)

# üö¶ Router function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î flow ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ tripwire
def guardrail_router(state: AgentState) -> str:
    if state.classification_result.out_of_domain:
        return "end"
    return "continue"


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
builder = StateGraph(AgentState)
builder.add_node("input_guardrail", input_guardrail_node)
builder.add_node("classify_query", run_classification_pipeline)
builder.add_node("clarification_response_agent", clarification_response_agent)
builder.add_node("fallback_response", fallback_agent)
# builder.add_node("retrieval_context_agent", dummy_retrieval_agent)

builder.set_entry_point("input_guardrail")

# ‚úÖ ‡πÉ‡∏ä‡πâ conditional edges ‡πÅ‡∏ó‡∏ô add_edge
builder.add_conditional_edges(
    "input_guardrail",
    guardrail_router,
    {
        "continue": "classify_query",
        "end": END
    }
)

builder.add_conditional_edges(
    "classify_query",
    routing_node,
    {
        "fallback_handler": "fallback_response",
        "clarification_response_agent": "clarification_response_agent",
        "retrieval_context_agent": END
    }
)

graph = builder.compile()

if __name__ == "__main__":
    initial_state = AgentState(user_query="‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á caption ‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢")
    raw_state = asyncio.run(graph.ainvoke(initial_state))
    final_state = AgentState(**raw_state)
    print(json.dumps(final_state.model_dump(), indent=2, ensure_ascii=False))
