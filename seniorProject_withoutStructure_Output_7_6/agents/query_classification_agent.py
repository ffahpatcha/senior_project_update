from state_schema import AgentState, ClassificationResult, CategoryScore
from utils.llm_utils import get_together_llm
from config.settings import TOGETHER_MODEL
import json, re

# ---------- prompt ‡∏ù‡∏±‡∏á‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î ----------
prompt_template = """
‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢" ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á **‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏° (post oral surgery)** ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏ü‡∏±‡∏ô ‡∏ú‡πà‡∏≤‡∏ü‡∏±‡∏ô‡∏Ñ‡∏∏‡∏î ‡∏Ç‡∏π‡∏î‡∏´‡∏¥‡∏ô‡∏õ‡∏π‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏≤‡∏Å‡∏ü‡∏±‡∏ô

---

### üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ

---

### üóÇ ‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢ (category_level_2):
1. ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‚Äî ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡πà‡∏≠‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£  
2. ‡πÅ‡∏ú‡∏• ‚Äî ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏•‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÑ‡∏´‡∏• ‡πÅ‡∏ú‡∏•‡∏ö‡∏ß‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ô‡πÅ‡∏ú‡∏•  
3. ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡∏†‡∏≤‡∏ß‡∏∞‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô ‚Äî ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏°‡∏µ‡πÑ‡∏Ç‡πâ, ‡∏´‡∏ô‡∏≠‡∏á, ‡∏Å‡∏•‡∏∑‡∏ô‡∏•‡∏≥‡∏ö‡∏≤‡∏Å  
4. ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ ‚Äî ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏á‡∏ü‡∏±‡∏ô ‡∏ö‡πâ‡∏ß‡∏ô‡∏õ‡∏≤‡∏Å ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Ñ‡∏ö‡πÄ‡∏¢‡πá‡∏ô  
5. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‚Äî ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå ‡πÄ‡∏Ñ‡∏µ‡πâ‡∏¢‡∏ß‡∏≠‡∏≤‡∏´‡∏≤‡∏£  

---

### üß† ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:
- ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ confidence ‚â• 0.6  
- ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‚Üí confidence < 0.6 ‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î ‡πÅ‡∏•‡∏∞ clarification_needed = true  
- ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0.3 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏•‡∏¢ ‚Üí out_of_domain = true

---

üìå ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

{
  "user_query": "{user_query}",
  "category_level_1": "patient",
  "category_level_2": [
    {"subcategory": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "confidence": 0.0},
    {"subcategory": "‡πÅ‡∏ú‡∏•", "confidence": 0.0},
    {"subcategory": "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡∏†‡∏≤‡∏ß‡∏∞‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô", "confidence": 0.0},
    {"subcategory": "‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£", "confidence": 0.0},
    {"subcategory": "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "confidence": 0.0}
  ],
  "clarification_needed": false,
  "out_of_domain": false
}

---

‡πÇ‡∏õ‡∏£‡∏î‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô:

{user_query}

‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å JSON ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
"""

# ---------- helper: ‡∏î‡∏∂‡∏á JSON ‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏Å ----------
def extract_first_json(text: str) -> str:
    block = re.search(r"```json\s*({[\s\S]+?})\s*```", text)
    if block:
        return block.group(1)
    brace = re.search(r"{[\s\S]+?}", text)
    if brace:
        return brace.group(0)
    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö JSON ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

# ---------- agent ‡∏´‡∏•‡∏±‡∏Å ----------
def classify_query_agent(user_query: str) -> ClassificationResult:
    full_prompt = prompt_template.replace("{user_query}", user_query.strip())
    llm = get_together_llm(TOGETHER_MODEL)
    raw = llm.invoke(full_prompt)
    result_str = raw if isinstance(raw, str) else raw.get("text", "")


    try:
        json_str = extract_first_json(result_str)
        result_json = json.loads(json_str)

        return ClassificationResult(
            category_level_1=result_json["category_level_1"],
            category_level_2=[CategoryScore(**sub) for sub in result_json["category_level_2"]],
            clarification_needed=result_json["clarification_needed"],
            out_of_domain=result_json["out_of_domain"],
        )
    except Exception as e:
        raise ValueError(f"‚ùå JSON parse failed: {e}\n--- raw ---\n{result_str}")

# ---------- node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LangGraph ----------
def classification_node(state: AgentState) -> AgentState:
    classification = classify_query_agent(state.user_query)
    return state.copy(update={"classification_result": classification})
